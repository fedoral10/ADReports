using ADReports.Excel;
using SimpleExcelImport;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ADReports.Forms.ApUs
{
    public partial class frmUsrApp2 : Form
    {
        public frmUsrApp2()
        {
            InitializeComponent();
            llenar_cmb();
            // This line of code is generated by Data Source Configuration Wizard
            
        }

        private void llenar_cmb()
        {
            foreach (string p in Dominio.PAIS.paises)
            {
                cmbPais.Items.Add(p);
            }
            cmbPais.Items.Add("TODOS");
            if (cmbPais.Items.Count > 0)
                cmbPais.SelectedIndex = 0;
        }

        private void tsBtnImportar_Click(object sender, EventArgs e)
        {
            frmCmbAplicacion cmbApp = new frmCmbAplicacion();
            if (cmbApp.ShowDialog() == DialogResult.Cancel)
            {
                return;
            }

            string filtro = "Archivos Excel (*.xlsx)|*.xlsx";
            string archivo = commons.getOpenFile(filtro);
            if (string.IsNullOrEmpty(archivo))
            {
                return;
            }
            try
            {
                var data = File.ReadAllBytes(archivo);
                ImportFromExcel import = new ImportFromExcel();
                import.LoadXlsx(data);
                //first parameter it's the sheet number in the excel workbook
                //second parameter it's the number of rows to skip at the start(we have an header in the file)
                List<UsuarioExcel> output = import.ExcelToList<UsuarioExcel>(0, 1);
                int x = 0;

                /*string sql_base = "insert into entidad_aplicacion(id_aplicacion,id_entidad)" +
                             "values({0},(select id_entidad from entidad where samaccountname = '{1}' limit 1))";*/

                foreach (UsuarioExcel usr in output)
                {
                    /*Verifica si existe ese usuario*/
                    clsRepo repo = new clsRepo();

                    switch (repo.getCountEntidad(usr.ID))
                    {

                        /*Si es 0, el usuario no existe y se debe insertar*/
                        case 0:
                            repo.Insertar<Dominio.Entidad>(usr.getEntidad());
                            break;
                        case 1:
                            /*el usuario existe y se debe procesar*/
                            break;
                        default:
                            /*verificar ese usuario*/
                            return;


                    }

                    //string sql = string.Format(sql_base, cmbApp.getAplicacion().idAplicacion, usr.ID);
                    try
                    {
                        Dominio.EntidadAplicacion ea = new Dominio.EntidadAplicacion();
                        ea.idAplicacion = cmbApp.getAplicacion().idAplicacion;
                        ea.idEntidad = repo.getIdEntidad(usr.ID);
                        repo.Insertar<Dominio.EntidadAplicacion>(ea);
                        //int lol = repo.Actualizacion(sql);
                        //Console.WriteLine("rows affected: " + lol + " usr ID:" + usr.ID);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine("Error con usuario: " + usr.ID + "\n" + ex.Message);
                    }
                    x++;
                }
            }
            catch (Exception ex)
            {
                commons.showMessageBoxError(ex.Source, ex.Message);
            }
        }

        private void tsBtnRefresh_Click(object sender, EventArgs e)
        {
            clsRepo repo = new clsRepo();

            string sql = "select e.samaccountname as ID,e.cn as NOMBRE,e.description AS PUESTO,case when e.department ='' then e.physicaldeliveryofficename else e.department end AS AREA, e.company AS EMPRESA, " +
                                    "a.nombre || '-'|| a.pais as APLICACION " +
                                    "from entidad_aplicacion ea " +
                                    "inner join entidad e on e.id_entidad = ea.id_entidad " +
                                    "inner join aplicacion a on ea.id_aplicacion = a.id_aplicacion "
                                    ;

            if (cmbPais.SelectedItem.ToString() != "TODOS")
            {
                sql = sql + " and a.pais ='" + cmbPais.SelectedItem.ToString() + "'";
            }


            DataTable dt = repo.Seleccionar(sql);
            pivotGridControl1.DataSource = dt;


            //IDataAdapter ta = repo.SeleccionarTableAdapter(sql);
            //ta.Fill(this.dsPivot.lol);
            
            
        }

        private void tsBtnExportar_Click(object sender, EventArgs e)
        {
            string filename = commons.getSaveFile("Archivos de Excel 2007+(*.xlsx)|*.xlsx");

            if (!string.IsNullOrEmpty(filename))
            {
                pivotGridControl1.ExportToXlsx(filename);
            }
        }

        private void frmUsrApp2_Load(object sender, EventArgs e)
        {
            // TODO: This line of code loads data into the 'dsPivot.lol' table. You can move, or remove it, as needed.
            //this.lolTableAdapter.Fill(this.dsPivot.lol);
            // TODO: This line of code loads data into the 'dsPivot.lol' table. You can move, or remove it, as needed.
            //this.lolTableAdapter.Fill(this.dsPivot.lol);

        }

        private void pivotGridControl1_CustomSummary(object sender, DevExpress.XtraPivotGrid.PivotGridCustomSummaryEventArgs e)
        {
            if (e.DataField == colXD)
            {
                if (e.RowFieldValue != null)
                {
                    e.CustomValue = "X";
                }
            }
        }
    }
}
